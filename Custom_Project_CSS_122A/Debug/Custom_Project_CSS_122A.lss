
Custom_Project_CSS_122A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000292  00000326  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000292  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800106  00800106  0000032c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000035c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c81  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a6  00000000  00000000  000010ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000551  00000000  00000000  00001953  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00001ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f1  00000000  00000000  00001fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000027d  00000000  00000000  000025cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000284a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	74 c0       	rjmp	.+232    	; 0x11e <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e9       	ldi	r30, 0x92	; 146
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 31       	cpi	r26, 0x11	; 17
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	d0 d0       	rcall	.+416    	; 0x264 <main>
  c4:	e4 c0       	rjmp	.+456    	; 0x28e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
}

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
	_avr_timer_cntcurr = _avr_timer_M;
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	5e 98       	cbi	0x0b, 6	; 11
  f0:	88 b9       	out	0x08, r24	; 8
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	00 00       	nop
  f6:	5f 98       	cbi	0x0b, 7	; 11
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_init>:
 100:	84 e6       	ldi	r24, 0x64	; 100
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	e1 df       	rcall	.-62     	; 0xc8 <delay_ms>
 106:	88 e3       	ldi	r24, 0x38	; 56
 108:	f2 df       	rcall	.-28     	; 0xee <LCD_WriteCommand>
 10a:	86 e0       	ldi	r24, 0x06	; 6
 10c:	f0 df       	rcall	.-32     	; 0xee <LCD_WriteCommand>
 10e:	8f e0       	ldi	r24, 0x0F	; 15
 110:	ee df       	rcall	.-36     	; 0xee <LCD_WriteCommand>
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	ec df       	rcall	.-40     	; 0xee <LCD_WriteCommand>
 116:	8a e0       	ldi	r24, 0x0A	; 10
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 cf       	rjmp	.-84     	; 0xc8 <delay_ms>
 11c:	08 95       	ret

0000011e <__vector_13>:
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
 12c:	af 93       	push	r26
 12e:	bf 93       	push	r27
 130:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_avr_timer_cntcurr>
 134:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_avr_timer_cntcurr+0x1>
 138:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <_avr_timer_cntcurr+0x2>
 13c:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <_avr_timer_cntcurr+0x3>
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	a1 09       	sbc	r26, r1
 144:	b1 09       	sbc	r27, r1
 146:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_cntcurr>
 14a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_cntcurr+0x1>
 14e:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <_avr_timer_cntcurr+0x2>
 152:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <_avr_timer_cntcurr+0x3>
 156:	89 2b       	or	r24, r25
 158:	8a 2b       	or	r24, r26
 15a:	8b 2b       	or	r24, r27
 15c:	99 f4       	brne	.+38     	; 0x184 <__vector_13+0x66>
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <TimerFlag>
 164:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_avr_timer_M>
 168:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_avr_timer_M+0x1>
 16c:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <_avr_timer_M+0x2>
 170:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <_avr_timer_M+0x3>
 174:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <_avr_timer_cntcurr>
 178:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <_avr_timer_cntcurr+0x1>
 17c:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <_avr_timer_cntcurr+0x2>
 180:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <_avr_timer_cntcurr+0x3>
 184:	bf 91       	pop	r27
 186:	af 91       	pop	r26
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <livingRoomLights>:
//State Machines
enum LivingRoomLights_States {Start1,LRbtn_unpressed, LRbtn_pressed, LRafter_pressed} livingRoomLights_state;
unsigned char livingRoomlights;
unsigned char LRlightsisOn = 1;
void livingRoomLights() {
	LRBtn = ~PINA& 0x01;
 196:	80 b1       	in	r24, 0x00	; 0
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	28 2f       	mov	r18, r24
 19c:	21 70       	andi	r18, 0x01	; 1
 19e:	80 fd       	sbrc	r24, 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <LRBtn>
	switch (livingRoomLights_state) { //Transitions
 1a6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <livingRoomLights_state>
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	51 f0       	breq	.+20     	; 0x1c2 <livingRoomLights+0x2c>
 1ae:	28 f0       	brcs	.+10     	; 0x1ba <livingRoomLights+0x24>
 1b0:	82 30       	cpi	r24, 0x02	; 2
 1b2:	69 f0       	breq	.+26     	; 0x1ce <livingRoomLights+0x38>
 1b4:	83 30       	cpi	r24, 0x03	; 3
 1b6:	79 f0       	breq	.+30     	; 0x1d6 <livingRoomLights+0x40>
 1b8:	14 c0       	rjmp	.+40     	; 0x1e2 <livingRoomLights+0x4c>
		case Start1:
		livingRoomLights_state= LRbtn_unpressed;
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <livingRoomLights_state>
		break;
 1c0:	19 c0       	rjmp	.+50     	; 0x1f4 <livingRoomLights+0x5e>
		case LRbtn_unpressed:
		if (LRBtn)
 1c2:	21 11       	cpse	r18, r1
 1c4:	17 c0       	rjmp	.+46     	; 0x1f4 <livingRoomLights+0x5e>
		{
			livingRoomLights_state = LRbtn_pressed;
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <livingRoomLights_state>
 1cc:	0c c0       	rjmp	.+24     	; 0x1e6 <livingRoomLights+0x50>
		}
		else
		livingRoomLights_state= LRbtn_unpressed;
		break;
		case LRbtn_pressed:
		livingRoomLights_state = LRafter_pressed;
 1ce:	83 e0       	ldi	r24, 0x03	; 3
 1d0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <livingRoomLights_state>
		break;
 1d4:	0f c0       	rjmp	.+30     	; 0x1f4 <livingRoomLights+0x5e>
		case LRafter_pressed:
		if (!LRBtn)
 1d6:	22 23       	and	r18, r18
 1d8:	69 f0       	breq	.+26     	; 0x1f4 <livingRoomLights+0x5e>
		{
			livingRoomLights_state = LRbtn_unpressed;
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <livingRoomLights_state>
 1e0:	09 c0       	rjmp	.+18     	; 0x1f4 <livingRoomLights+0x5e>

		default:
		break;
	}
	
	switch (livingRoomLights_state) { //Actions
 1e2:	82 30       	cpi	r24, 0x02	; 2
 1e4:	39 f4       	brne	.+14     	; 0x1f4 <livingRoomLights+0x5e>
		case Start1:
		break;
		case LRbtn_unpressed:
		break;
		case LRbtn_pressed:
		LRlightsisOn = !LRlightsisOn;
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <LRlightsisOn>
 1ec:	91 11       	cpse	r25, r1
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <LRlightsisOn>
		
		default:
		break;
		
	}
PORTB = LRlightsisOn;
 1f4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <LRlightsisOn>
 1f8:	85 b9       	out	0x05, r24	; 5
 1fa:	08 95       	ret

000001fc <bedRoomLights>:

enum BedRoomLights_States {Start2,BRbtn_unpressed, BRbtn_pressed, BRafter_pressed} bedRoomLights_state;
unsigned char bedRoomlights;
unsigned char BRlightsisOn = 2;
void bedRoomLights() {
	BRBtn = ~PINA& 0x02;
 1fc:	80 b1       	in	r24, 0x00	; 0
 1fe:	80 95       	com	r24
 200:	82 70       	andi	r24, 0x02	; 2
 202:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
	switch (bedRoomLights_state) { //Transitions
 206:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <bedRoomLights_state>
 20a:	91 30       	cpi	r25, 0x01	; 1
 20c:	51 f0       	breq	.+20     	; 0x222 <bedRoomLights+0x26>
 20e:	28 f0       	brcs	.+10     	; 0x21a <bedRoomLights+0x1e>
 210:	92 30       	cpi	r25, 0x02	; 2
 212:	61 f0       	breq	.+24     	; 0x22c <bedRoomLights+0x30>
 214:	93 30       	cpi	r25, 0x03	; 3
 216:	71 f0       	breq	.+28     	; 0x234 <bedRoomLights+0x38>
 218:	13 c0       	rjmp	.+38     	; 0x240 <bedRoomLights+0x44>
		case Start2:
		bedRoomLights_state= BRbtn_unpressed;
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <bedRoomLights_state>
		break;
 220:	1d c0       	rjmp	.+58     	; 0x25c <bedRoomLights+0x60>
		case BRbtn_unpressed:
		if (BRBtn== 0x02)
 222:	82 30       	cpi	r24, 0x02	; 2
 224:	d9 f4       	brne	.+54     	; 0x25c <bedRoomLights+0x60>
		{
			bedRoomLights_state = BRbtn_pressed;
 226:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <bedRoomLights_state>
 22a:	0c c0       	rjmp	.+24     	; 0x244 <bedRoomLights+0x48>
		}
		else
		bedRoomLights_state= BRbtn_unpressed;
		break;
		case BRbtn_pressed:
		bedRoomLights_state = BRafter_pressed;
 22c:	83 e0       	ldi	r24, 0x03	; 3
 22e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <bedRoomLights_state>
		break;
 232:	14 c0       	rjmp	.+40     	; 0x25c <bedRoomLights+0x60>
		case BRafter_pressed:
		if (BRBtn!=0x02)
 234:	82 30       	cpi	r24, 0x02	; 2
 236:	91 f0       	breq	.+36     	; 0x25c <bedRoomLights+0x60>
		{
			bedRoomLights_state = BRbtn_unpressed;
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <bedRoomLights_state>
 23e:	0e c0       	rjmp	.+28     	; 0x25c <bedRoomLights+0x60>

		default:
		break;
	}
	
	switch (bedRoomLights_state) { //Actions
 240:	92 30       	cpi	r25, 0x02	; 2
 242:	61 f4       	brne	.+24     	; 0x25c <bedRoomLights+0x60>
		case Start2:
		break;
		case BRbtn_unpressed:
		break;
		case BRbtn_pressed:
		if (BRlightsisOn == 2) {
 244:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 248:	82 30       	cpi	r24, 0x02	; 2
 24a:	19 f4       	brne	.+6      	; 0x252 <bedRoomLights+0x56>
			BRlightsisOn = 0;
 24c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 250:	05 c0       	rjmp	.+10     	; 0x25c <bedRoomLights+0x60>
		}
		else if (BRlightsisOn == 0)
 252:	81 11       	cpse	r24, r1
 254:	03 c0       	rjmp	.+6      	; 0x25c <bedRoomLights+0x60>
		{
			BRlightsisOn = 2;
 256:	82 e0       	ldi	r24, 0x02	; 2
 258:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		
		default:
		break;
		
	}
	PORTB = BRlightsisOn;
 25c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 260:	85 b9       	out	0x05, r24	; 5
 262:	08 95       	ret

00000264 <main>:
}

int main(void)
{
    DDRA = 0x00; PORTA = 0xFF; //input from port A
 264:	11 b8       	out	0x01, r1	; 1
 266:	8f ef       	ldi	r24, 0xFF	; 255
 268:	82 b9       	out	0x02, r24	; 2
    DDRB = 0xFF; PORTB = 0x00; //output of led
 26a:	84 b9       	out	0x04, r24	; 4
 26c:	15 b8       	out	0x05, r1	; 5
	
	LCD_init();
 26e:	48 df       	rcall	.-368    	; 0x100 <LCD_init>
	
	PORTB = 0x04;
 270:	84 e0       	ldi	r24, 0x04	; 4
 272:	85 b9       	out	0x05, r24	; 5
	PORTB = 0x08;
 274:	88 e0       	ldi	r24, 0x08	; 8
 276:	85 b9       	out	0x05, r24	; 5
	PORTB = 0x16;
 278:	86 e1       	ldi	r24, 0x16	; 22
 27a:	85 b9       	out	0x05, r24	; 5
	PORTB = 0x32;
 27c:	82 e3       	ldi	r24, 0x32	; 50
 27e:	85 b9       	out	0x05, r24	; 5
	
	//State Machines
	livingRoomLights_state = Start1;
 280:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <livingRoomLights_state>
	bedRoomLights_state = Start2;
 284:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <bedRoomLights_state>
    while (1) 
    {
		livingRoomLights();
		bedRoomLights();
 288:	86 df       	rcall	.-244    	; 0x196 <livingRoomLights>
 28a:	b8 df       	rcall	.-144    	; 0x1fc <bedRoomLights>
 28c:	fd cf       	rjmp	.-6      	; 0x288 <main+0x24>

0000028e <_exit>:
 28e:	f8 94       	cli

00000290 <__stop_program>:
 290:	ff cf       	rjmp	.-2      	; 0x290 <__stop_program>
